// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array power_of_2;

    /** Initializes the library. */
    function void init() {
        let power_of_2 = Array.new(16);
        let power_of_2[0] = 1;
        let power_of_2[1] = 2;
        let power_of_2[2] = 4;
        let power_of_2[3] = 8;
        let power_of_2[4] = 16;
        let power_of_2[5] = 32;
        let power_of_2[6] = 64;
        let power_of_2[7] = 128;
        let power_of_2[8] = 256;
        let power_of_2[9] = 512;
        let power_of_2[10] = 1024;
        let power_of_2[11] = 2048;
        let power_of_2[12] = 4096;
        let power_of_2[13] = 8192;
        let power_of_2[14] = 16384;
        let power_of_2[15] = 16384 + 16384; // overflow
        return; 
    }

    function int powerOfTwo(int i) {
        return power_of_2[i];
    }

    function boolean bit(int x, int n) {
        return ~((x & power_of_2[n]) = 0);
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) { return -x; }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, j;
        let sum = 0;
        let j = 0;

        while (j < 16) {
            if (Math.bit(y, j)) {
                let sum = sum + x;
            }
            let x = x + x;
            let j = j + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, temp, res;
        var boolean neg_x, neg_y;
        let neg_x = (x < 0);
        let neg_y = (y < 0);
        let x = Math.abs(x);
        let y = Math.abs(y);

        if (y > x) { return 0; }

        let q = Math.divide(x, y + y);
        let temp = q + q;
        if ((x - Math.multiply(temp, y)) < y) {
            let res = temp;
        }
        else {
            let res = temp + 1;
        }

        if (neg_x = neg_y) { return res; }
        return -res;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int j, y;
        var int approx;
        var int approx_squared;

        let y = 0;
        let j = 7;  // 16/2 -1

        while (~(j < 0)) {
            let approx = y + power_of_2[j];
            let approx_squared = approx * approx;
            if (~(approx_squared > x) & (approx_squared > 0)) {
                let y = approx;
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) { return a; }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) { return a; }
        return b;
    }
}
