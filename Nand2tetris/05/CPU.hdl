/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        Mux16(a=instruction, b=aluout, sel=instruction[15], out=Ain); 
        // if MSB == 1: 1 xx a cccccc ddd jjj
        // else: 0### #### #### ####
        // load address into ARegister if MSB==0
        And(a=instruction[3], b=instruction[15], out=writeM);
        And(a=instruction[4], b=instruction[15], out=writeD);
        And(a=instruction[5], b=instruction[15], out=writeA1);
        Not(in=instruction[15], out=writeA2);         // write ARegister when an address instruction is inputed.
        Or(a=writeA1, b=writeA2, out=writeA);

        ARegister(in=Ain, load=writeA, out=Aout);
        Mux16(a=Aout, b=inM, sel=instruction[12], out=muxAM);
        DRegister(in=aluout, load=writeD, out=Dout);
        ALU(x=Dout, y=muxAM,
            zx=instruction[11], nx=instruction[10],
            zy=instruction[9], ny=instruction[8],
            f=instruction[7], no=instruction[6],
            out=aluout, zr=aluzr, ng=alung);
        And16(a=aluout, b=true, out=outM);

        Drop16(in=Aout, out=addressM);
        // extra CHIP implemented to drop a 16-bit 

        Or(a=aluzr, b=alung, out=le0);
        Not(in=le0, out=alupo);
        And(a=instruction[0], b=alupo, out=jump1);
        And(a=instruction[1], b=aluzr, out=jump2);
        And(a=instruction[2], b=alung, out=jump3);
        Or(a=jump1, b=jump2, out=jump12);
        Or(a=jump12, b=jump3, out=jump123);
        And(a=instruction[15], b=jump123, out=jump);

        PC(in=Aout, load=jump, inc=true, reset=reset, out=pcout);
        Drop16(in=pcout, out=pc);
}