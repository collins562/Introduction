/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    Mux16(a=x, b=false, sel=zx, out=xorz);      // if (zx == 1) then x = 0
    Not16(in=xorz, out=notxorz);
    Mux16(a=xorz, b=notxorz, sel=nx, out=xsel);  // if (nx == 1) then x = !x

    Mux16(a=y, b=false, sel=zy, out=yorz);      // if (zy == 1) then y = 0
    Not16(in=yorz, out=notyorz);
    Mux16(a=yorz, b=notyorz, sel=ny, out=ysel);  // if (ny == 1) then y = !y

    And16(a=xsel, b=ysel, out=xandy);
    Add16(a=xsel, b=ysel, out=sum);
    Mux16(a=xandy, b=sum, sel=f, out=mout);    // if (f == 1) then x + y else x & y
    Not16(in=mout, out=notmout);
    Mux16(a=mout, b=notmout, sel=no, out=result);// if (no == 1) then out = !out

    And16(a=result, b=true, out=out);
    Or16Way(in=result, out=notzr);
    Not(in=notzr, out=zr);
    IsNeg16(in=result, out=ng);
}